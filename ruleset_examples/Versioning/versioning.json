{
  "description": "### Set of rules to enforce versioning guidelines\n\nTo use these rules: \n\n1. Go to your Stoplight workspace.\n2. Create a [style guide project](https://meta.stoplight.io/docs/platform/364e30f79daa0-create-a-style-guide) OR edit a project that has an API.\n3. Select **Manage Style Guides**.\n4. Enable `Versioning` from list of public style guides.\n\nYou can then:\n\n- Use the style guide as-is to [automatically lint](https://meta.stoplight.io/docs/platform/7975f76a794c4-validation-and-linting) your API files\n- [Disable individual rules](https://meta.stoplight.io/docs/platform/3f80fd36750e3-disable-inherited-rules)  that do not follow your organization's standards\n- [Reuse and customize rules](https://meta.stoplight.io/docs/platform/2331c5241ddfc) to meet your needs\n\nIf you have suggestions on how to improve the ruleset or find any bugs, you can open an issue [here](https://github.com/stoplightio/spectral-url-versioning/).",
  "formats": [
    "oas2",
    "oas3",
    "oas3.0",
    "oas3.1"
  ],
  "aliases": {},
  "rules": {
    "one-api-version-per-document": {
      "given": [
        "$.servers"
      ],
      "severity": "error",
      "then": {
        "function": "onlyOneServerVersion"
      },
      "description": "Server URLs should not contain multiple API versions.\r\n\r\nMixing multiple global API versions into a single description document can lead to confusion. Instead of describing multiple APIs together in a single document, split them into multiple APIs so no accidental changes can leak between different versions.\r\n\r\n**Invalid Example**\r\n\r\nThis example incorrectly includes multiple versions. \r\n\r\n```yaml\r\nservers:\r\n  - description: ''\r\n    url: 'https://api.openweathermap.org/data/2'\r\n  - description: \r\n    url: 'https://api.openweathermap.org/data/3'\r\n```\r\n\r\n**Valid Example**\r\n\r\nThis example correctly includes a single version. \r\n\r\n```yaml\r\nservers:\r\n  - description: ''\r\n    url: 'https://api.openweathermap.org/data/2'\r\n```",
      "message": "Server URLs contains multiple API versions. {{message}}",
      "formats": [
        "oas3"
      ]
    },
    "only-major-api-versions": {
      "given": [
        "$.servers[*].url"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "/[\\.|\\/|](v|version)?([0-9]+[\\.|\\/|$]?){2,}/i",
          "match": ""
        }
      },
      "description": "The server URL should contain a major version only.\n\nUsing semVer-like versions for an API are almost never necessary, because breaking changes could only happen on a major version, and non-breaking changes don't matter. The entire concept is invalidated by API evolution, meaning that a minor version can be deployed that adds new functionality but does not break anything. If you have a patch, getting that patched version out to clients immediately means fewer production issues, and you don't want to wait for them to redeploy the client application to use the new server URL.\n\n**Invalid Example**\n\nVersion 2.5 is considered a minor version.\n\n```yaml\nservers:\n  - description: ''\n    url: 'https://api.openweathermap.org/data/2.5'\n```\n\n**Valid Example**\n\nVersion 2 is considered a major version.\n\n```yaml\nservers:\n  - description: ''\n    url: 'https://api.openweathermap.org/data/2'\n```\n",
      "message": "The server URL should contain a major version only, not minor or patch versions.",
      "formats": [
        "oas3"
      ]
    },
    "no-path-versioning": {
      "given": [
        "$.paths[*]~"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "/((?:\\/)(v|version)?[0-9]{1,3}(?:\\/)?)/i",
          "match": ""
        }
      },
      "description": "API paths should not include versioning. Versions should instead be in the server URL.\r\n\r\nVersioning in the path can lead to confusion that is best avoided. Perhaps multiple global versions are in the same document, but they reference shared schemas that change over time. This may unintentionally break backwards compatibility. \r\n\r\n**Invalid Example**\r\n\r\nThe path incorrectly contains a version.\r\n\r\n```yaml\r\npaths:\r\n  /weather/2.0:\r\n```\r\n\r\n**Valid Example**\r\n\r\nThe path does not contain a version.\r\n\r\n```yaml\r\npaths:\r\n  /weather:\r\n```",
      "message": "{{path}} should not contain a version number. "
    }
  },
  "functions": [
    "onlyOneServerVersion"
  ],
  "functionsDir": "functions"
}