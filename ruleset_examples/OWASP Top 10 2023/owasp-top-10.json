{
  "description": "**Set of rules to enforce [OWASP security guidelines](https://owasp.org/www-project-api-security/)**.\n\nTo use these rules:\n \n1. Go to your Stoplight workspace.\n2. Create a [style guide project](https://meta.stoplight.io/docs/platform/364e30f79daa0-create-a-style-guide) OR edit a project that has an API.\n3. Select **Manage Style Guides**.\n4. Enable `OWASP Top 10 2023` from list of public style guides.\n\nYou can then:\n\n- Use the style guide as-is to [automatically lint](https://meta.stoplight.io/docs/platform/7975f76a794c4-validation-and-linting) your API files\n- [Disable individual rules](https://meta.stoplight.io/docs/platform/3f80fd36750e3-disable-inherited-rules)  that do not follow your organization's standards\n- [Reuse and customize rules](https://meta.stoplight.io/docs/platform/2331c5241ddfc) to meet your needs\n\nIf you have suggestions on how to improve the ruleset or find any bugs, you can open an issue [here](https://github.com/stoplightio/spectral-owasp-ruleset).",
  "formats": [
    "oas2",
    "oas3",
    "oas3.0",
    "oas3.1"
  ],
  "aliases": {
    "ArrayProperties": {
      "description": "",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": [
            "$..[?(@ && @.type==\"array\")]"
          ]
        },
        {
          "formats": [
            "oas3_0"
          ],
          "given": [
            "$..[?(@ && @.type==\"array\")]"
          ]
        },
        {
          "formats": [
            "oas3_1"
          ],
          "given": [
            "$..[?(@ && @.type==\"array\")]",
            "$..[?(@ && @.type && @.type.constructor.name === \"Array\" && @.type.includes(\"array\"))]"
          ]
        }
      ]
    },
    "IntegerProperties": {
      "description": "",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": [
            "$..[?(@ && @.type==\"integer\")]"
          ]
        },
        {
          "formats": [
            "oas3_0"
          ],
          "given": [
            "$..[?(@ && @.type==\"integer\")]"
          ]
        },
        {
          "formats": [
            "oas3_1"
          ],
          "given": [
            "$..[?(@ && @.type==\"integer\")]",
            "$..[?(@ && @.type && @.type.constructor.name === \"Array\" && @.type.includes(\"integer\"))]"
          ]
        }
      ]
    },
    "StringProperties": {
      "description": "",
      "targets": [
        {
          "formats": [
            "oas2"
          ],
          "given": [
            "$..[?(@ && @.type==\"string\")]"
          ]
        },
        {
          "formats": [
            "oas3_0"
          ],
          "given": [
            "$..[?(@ && @.type==\"string\")]"
          ]
        },
        {
          "formats": [
            "oas3_1"
          ],
          "given": [
            "$..[?(@ && @.type==\"string\")]",
            "$..[?(@ && @.type && @.type.constructor.name === \"Array\" && @.type.includes(\"string\"))]"
          ]
        }
      ]
    }
  },
  "rules": {
    "owasp:api1:2023-no-numeric-ids": {
      "given": [
        "$.paths..parameters[*][?(@property === \"name\" && (@ === \"id\" || @.match(/(_id|Id|-id)$/)))]^.schema"
      ],
      "severity": "error",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "object",
            "not": {
              "properties": {
                "type": {
                  "const": "integer"
                }
              }
            }
          }
        }
      },
      "description": "Use random IDs that cannot be guessed. UUIDs are preferred but any other random string will do.",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api2:2023-no-http-basic": {
      "given": [
        "$.components.securitySchemes[*]"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "basic"
        },
        "field": "scheme"
      },
      "description": "Basic authentication credentials transported over network are more susceptible to interception than other forms of authentication, and as they are not encrypted it means passwords and tokens are more easily leaked.",
      "message": "Security scheme uses HTTP Basic. Use a more secure authentication method, like OAuth 2, or OpenID.",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api2:2023-no-api-keys-in-url": {
      "given": [
        "$..[securitySchemes][?(@ && @.type==\"apiKey\")].in"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "^(path|query)$"
        }
      },
      "description": "API Keys are are passed in headers, cookies or query parameters to access APIs Those keys can be eavesdropped, especially when they are passed in the URL as logging or history tools will keep track of them and potentially expose them.",
      "message": "API Key passed in URL: {{error}}.",
      "resolved": true,
      "formats": [
        "oas3"
      ]
    },
    "owasp:api2:2023-no-credentials-in-url": {
      "given": [
        "$..parameters[?(@ && @.in && @.in.match(/query|path/))].name"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "/^.*(client_?secret|token|access_?token|refresh_?token|id_?token|password|secret|api-?key).*$/i"
        },
        "field": "name"
      },
      "description": "URL parameters MUST NOT contain credentials such as API key, password, or secret. See [RAC_GEN_004](https://docs.italia.it/italia/piano-triennale-ict/lg-modellointeroperabilita-docs/it/bozza/doc/04_Raccomandazioni%20di%20implementazione/04_raccomandazioni-tecniche-generali/01_globali.html?highlight=credenziali#rac-gen-004-non-passare-credenziali-o-dati-riservati-nellurl)",
      "message": "Security credentials detected in path parameter: {{value}}.",
      "resolved": true,
      "formats": [
        "oas3"
      ]
    },
    "owasp:api2:2023-auth-insecure-schemes": {
      "given": [
        "$..[securitySchemes][?(@.type==\"http\")].scheme"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "^(negotiate|oauth)$"
        }
      },
      "description": "There are many [HTTP authorization schemes](https://www.iana.org/assignments/http-authschemes/) but some of them are now considered insecure, such as negotiating authentication using specifications like NTLM or OAuth v1.",
      "message": "Authentication scheme is considered outdated or insecure: {{value}}.",
      "resolved": true,
      "formats": [
        "oas3"
      ]
    },
    "owasp:api2:2023-jwt-best-practices": {
      "given": [
        "$.components.securitySchemes[?(@ && @.type==\"oauth2\")]",
        "$.components.securitySchemes[?(@ && (@.bearerFormat==\"jwt\" || @.bearerFormat==\"JWT\"))]"
      ],
      "severity": "error",
      "then": [
        {
          "function": "truthy",
          "field": "description"
        },
        {
          "function": "pattern",
          "functionOptions": {
            "match": ".*RFC8725.*"
          },
          "field": "description"
        }
      ],
      "description": "JSON Web Tokens RFC7519 is a compact, URL-safe, means of representing claims to be transferred between two parties. JWT can be enclosed in encrypted or signed tokens like JWS and JWE.\n\nThe [JOSE IANA registry](https://www.iana.org/assignments/jose/jose.xhtml) provides algorithms information.\n\nRFC8725 describes common pitfalls in the JWx specifications and in\ntheir implementations, such as:\n- the ability to ignore algorithms, eg. `{\"alg\": \"none\"}`;\n- using insecure algorithms like `RSASSA-PKCS1-v1_5` eg. `{\"alg\": \"RS256\"}`.\nAn API using JWT should explicit in the `description`\nthat the implementation conforms to RFC8725.\n```\ncomponents:\n  securitySchemes:\n    JWTBearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: |-\n        A bearer token in the format of a JWS and conformato\n        to the specifications included in RFC8725.\n```",
      "message": "Security schemes using JWTs must explicitly declare support for RFC8725 in the description.",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api2:2023-short-lived-access-tokens": {
      "given": [
        "$.components.securitySchemes[?(@ && @.type==\"oauth2\")].flows[?(@property != \"clientCredentials\")]"
      ],
      "severity": "error",
      "then": {
        "function": "truthy",
        "field": "refreshUrl"
      },
      "description": "Using short-lived access tokens is a good practice, and when using OAuth 2 this is done by using refresh tokens. If a malicious actor is able to get hold of an access token then rotation means that token might not work by the time they try to use it, or it could at least reduce how long they are able to perform malicious requests.",
      "message": "Authentication scheme does not appear to support refresh tokens, meaning access tokens likely do not expire.",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api2:2023-write-restricted": {
      "given": [
        "$"
      ],
      "severity": "error",
      "then": {
        "function": "checkSecurity",
        "functionOptions": {
          "schemesPath": [
            "securitySchemes"
          ],
          "methods": [
            "post",
            "put",
            "patch",
            "delete"
          ]
        }
      },
      "description": "All write operations (POST, PUT, PATCH, DELETE) must be secured by at least one security scheme. Security schemes are defined in the `securityScheme` section then referenced in the `security` key at the global or operation levels.",
      "message": "This write operation is not protected by any security scheme.",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api2:2023-read-restricted": {
      "given": [
        "$"
      ],
      "severity": "warn",
      "then": {
        "function": "checkSecurity",
        "functionOptions": {
          "schemesPath": [
            "securitySchemes"
          ],
          "nullable": true,
          "methods": [
            "get",
            "head"
          ]
        }
      },
      "description": "Read operations (GET, HEAD) should be secured by at least one security scheme. Security schemes are defined in the `securityScheme` section then referenced in the `security` key at the global or operation levels.",
      "message": "This read operation is not protected by any security scheme.",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api3:2023-no-additionalProperties": {
      "given": [
        "$..[?(@ && @.type==\"object\" && @.additionalProperties)]"
      ],
      "severity": "warn",
      "then": {
        "function": "falsy",
        "field": "additionalProperties"
      },
      "description": "By default JSON Schema allows additional properties, which can potentially lead to mass assignment issues, where unspecified fields are passed to the API without validation. Disable them with `additionalProperties: false` or add `maxProperties`.",
      "message": "If the additionalProperties keyword is used it must be set to false.",
      "resolved": true,
      "formats": [
        "oas3_0"
      ]
    },
    "owasp:api3:2023-constrained-additionalProperties": {
      "given": [
        "$..[?(@ && @.type==\"object\" && @.additionalProperties &&  @.additionalProperties!=true &&  @.additionalProperties!=false )]"
      ],
      "severity": "warn",
      "then": {
        "function": "defined",
        "field": "maxProperties"
      },
      "description": "By default JSON Schema allows additional properties, which can potentially lead to mass assignment issues, where unspecified fields are passed to the API without validation. Disable them with `additionalProperties: false` or add `maxProperties`",
      "message": "Objects should not allow unconstrained additionalProperties.",
      "resolved": true,
      "formats": [
        "oas3_0"
      ]
    },
    "owasp:api3:2023-no-unevaluatedProperties": {
      "given": [
        "$..[?(@ && @.type==\"object\" && @.unevaluatedProperties)]"
      ],
      "severity": "warn",
      "then": {
        "function": "falsy",
        "field": "unevaluatedProperties"
      },
      "description": "By default JSON Schema allows unevaluated properties, which can potentially lead to mass assignment issues, where unspecified fields are passed to the API without validation. Disable them with `unevaluatedProperties: false` or add `maxProperties`.",
      "message": "If the unevaluatedProperties keyword is used it must be set to false.",
      "resolved": true,
      "formats": [
        "oas3_1"
      ]
    },
    "owasp:api3:2023-constrained-unevaluatedProperties": {
      "given": [
        "$..[?(@ && @.type==\"object\" && @.unevaluatedProperties &&  @.unevaluatedProperties!=true &&  @.unevaluatedProperties!=false )]"
      ],
      "severity": "warn",
      "then": {
        "function": "defined",
        "field": "maxProperties"
      },
      "description": "By default JSON Schema allows unevaluated properties, which can potentially lead to mass assignment issues, where unspecified fields are passed to the API without validation. Disable them with `unevaluatedProperties: false` or add `maxProperties`",
      "message": "Objects should not allow unconstrained unevaluatedProperties.",
      "resolved": true,
      "formats": [
        "oas3_1"
      ]
    },
    "owasp:api4:2023-rate-limit": {
      "given": [
        "$.paths[*]..responses[?(@property.match(/^(2|4)/))]"
      ],
      "severity": "error",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "object",
            "oneOf": [
              {
                "required": [
                  "RateLimit"
                ]
              },
              {
                "required": [
                  "RateLimit-Limit",
                  "RateLimit-Reset"
                ]
              },
              {
                "required": [
                  "X-RateLimit-Limit"
                ]
              },
              {
                "required": [
                  "X-Rate-Limit-Limit"
                ]
              }
            ]
          }
        },
        "field": "headers"
      },
      "description": "Define proper rate limiting to avoid attackers overloading the API. There are many ways to implement rate-limiting, but most of them involve using HTTP headers, and there are two popular ways to do that:\n\nIETF Draft HTTP RateLimit Headers:. https://datatracker.ietf.org/doc/draft-ietf-httpapi-ratelimit-headers/\n\nCustomer headers like X-Rate-Limit-Limit (Twitter: https://developer.twitter.com/en/docs/twitter-api/rate-limits) or X-RateLimit-Limit (GitHub: https://docs.github.com/en/rest/overview/resources-in-the-rest-api)",
      "message": "All 2XX and 4XX responses should define rate limiting headers.",
      "resolved": true,
      "formats": [
        "oas3"
      ]
    },
    "owasp:api4:2023-rate-limit-retry-after": {
      "given": [
        "$..responses[429].headers"
      ],
      "severity": "error",
      "then": {
        "function": "defined",
        "field": "Retry-After"
      },
      "description": "Define proper rate limiting to avoid attackers overloading the API. Part of that involves setting a Retry-After header so well meaning consumers are not polling and potentially exacerbating problems.",
      "message": "A 429 response should define a Retry-After header.",
      "resolved": true,
      "formats": [
        "oas3"
      ]
    },
    "owasp:api4:2023-rate-limit-responses-429": {
      "given": [
        "$.paths..responses"
      ],
      "severity": "warn",
      "then": [
        {
          "function": "truthy",
          "field": "429"
        },
        {
          "function": "truthy",
          "field": "429.content"
        }
      ],
      "description": "OWASP API Security recommends defining schemas for all responses, even errors. A HTTP 429 response signals the API client is making too many requests, and will supply information about when to retry so that the client can back off calmly without everything breaking. Defining this response is important not just for documentation, but to empower contract testing to make sure the proper JSON structure is being returned instead of leaking implementation details in backtraces. It also ensures your API/framework/gateway actually has rate limiting set up.",
      "message": "Operation is missing rate limiting response in {{property}}.",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api4:2023-array-limit": {
      "given": [
        "#ArrayProperties"
      ],
      "severity": "error",
      "then": {
        "function": "defined",
        "field": "maxItems"
      },
      "description": "Array size should be limited to mitigate resource exhaustion attacks. This can be done using `maxItems`. You should ensure that the subschema in `items` is constrained too.",
      "message": "Schema of type array must specify maxItems.",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api4:2023-string-limit": {
      "given": [
        "#StringProperties"
      ],
      "severity": "error",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "object",
            "anyOf": [
              {
                "required": [
                  "maxLength"
                ]
              },
              {
                "required": [
                  "enum"
                ]
              },
              {
                "required": [
                  "const"
                ]
              }
            ]
          }
        }
      },
      "description": "String size should be limited to mitigate resource exhaustion attacks. This can be done using `maxLength`, `enum` or `const`.",
      "message": "Schema of type string must specify maxLength, enum, or const.",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api4:2023-string-restricted": {
      "given": [
        "#StringProperties"
      ],
      "severity": "warn",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "object",
            "anyOf": [
              {
                "required": [
                  "format"
                ]
              },
              {
                "required": [
                  "pattern"
                ]
              },
              {
                "required": [
                  "enum"
                ]
              },
              {
                "required": [
                  "const"
                ]
              }
            ]
          }
        }
      },
      "description": "To avoid unexpected values being sent or leaked, strings should have a `format`, RegEx `pattern`, `enum`, or `const`.",
      "message": "Schema of type string should specify a format, pattern, enum, or const.",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api4:2023-integer-limit": {
      "given": [
        "#IntegerProperties"
      ],
      "severity": "error",
      "then": [
        {
          "function": "xor",
          "functionOptions": {
            "properties": [
              "minimum",
              "exclusiveMinimum"
            ]
          }
        },
        {
          "function": "xor",
          "functionOptions": {
            "properties": [
              "maximum",
              "exclusiveMaximum"
            ]
          }
        }
      ],
      "description": "Integers should be limited to mitigate resource exhaustion attacks. This can be done using `minimum` and `maximum`, which can with e.g.: avoiding negative numbers when positive are expected, or reducing unreasonable iterations like doing something 1000 times when 10 is expected.",
      "message": "Schema of type integer must specify minimum and maximum.",
      "resolved": true,
      "formats": [
        "oas3_1"
      ]
    },
    "owasp:api4:2023-integer-limit-legacy": {
      "given": [
        "#IntegerProperties"
      ],
      "severity": "error",
      "then": [
        {
          "function": "defined",
          "field": "minimum"
        },
        {
          "function": "defined",
          "field": "maximum"
        }
      ],
      "description": "Integers should be limited to mitigate resource exhaustion attacks. This can be done using `minimum` and `maximum`, which can with e.g.: avoiding negative numbers when positive are expected, or reducing unreasonable iterations like doing something 1000 times when 10 is expected.",
      "message": "Schema of type integer must specify minimum and maximum.",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3_0"
      ]
    },
    "owasp:api4:2023-integer-format": {
      "given": [
        "#IntegerProperties"
      ],
      "severity": "error",
      "then": {
        "function": "defined",
        "field": "format"
      },
      "description": "Integers should be limited to mitigate resource exhaustion attacks. Specifying whether int32 or int64 is expected via `format`.",
      "message": "Schema of type integer must specify format (int32 or int64).",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api5:2023-admin-security-unique": {
      "given": [
        "$"
      ],
      "severity": "error",
      "then": {
        "function": "differentSecuritySchemes",
        "functionOptions": {
          "adminUrl": "/admin"
        }
      },
      "message": "{{error}}",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api7:2023-concerning-url-parameter": {
      "given": [
        "$.paths..parameters[*][?(@property === \"name\" && (@ === \"callback\" || @ === \"redirect\" || @.toString().match(/(_url|Url|-url)$/)))]^"
      ],
      "severity": "info",
      "then": {
        "function": "undefined"
      },
      "description": "Using external resource based on user input for webhooks, file fetching from URLs, custom SSO, URL previews, or redirects, can lead to a wide variety of security issues.\n\nLearn more about Server Side Request Forgery here: https://owasp.org/API-Security/editions/2023/en/0xa7-server-side-request-forgery/",
      "message": "Make sure to review the way this URL is handled to protect against Server Side Request Forgery.",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api8:2023-define-cors-origin": {
      "given": [
        "$.paths[*][*].responses[*]"
      ],
      "severity": "error",
      "then": [
        {
          "function": "truthy",
          "field": "headers"
        },
        {
          "function": "defined",
          "field": "headers.Access-Control-Allow-Origin"
        }
      ],
      "description": "Setting up CORS headers will control which websites can make browser-based HTTP requests to your API, using either the wildcard \"*\" to allow any origin, or \"null\" to disable any origin. Alternatively you can use \"Access-Control-Allow-Origin: https://example.com\" to indicate that only requests originating from the specified domain (https://example.com) are allowed to access its resources.\n\nMore about CORS here: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS.",
      "message": "Access-Control-Allow-Origin should be defined on all responses.",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api8:2023-no-scheme-http": {
      "given": [
        "$.schemes.*"
      ],
      "severity": "error",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "string",
            "enum": [
              "https",
              "wss"
            ]
          }
        }
      },
      "description": "Server interactions must use the http protocol as it's inherently insecure and can lead to PII and other sensitive information being leaked through traffic sniffing or man-in-the-middle attacks. Use the https or wss schemes instead.\n\nLearn more about the importance of TLS (over SSL) here: https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
      "message": "Server schemes must not use http. Use https or wss instead.",
      "resolved": true,
      "formats": [
        "oas2"
      ]
    },
    "owasp:api8:2023-no-server-http": {
      "given": [
        "$.servers..url"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "/^http:/"
        }
      },
      "description": "Server interactions must not use the http:// as it's inherently insecure and can lead to PII and other sensitive information being leaked through traffic sniffing or man-in-the-middle attacks. Use https:// or wss:// protocols instead.\n\nLearn more about the importance of TLS (over SSL) here: https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
      "message": "Server URLs must not use http://. Use https:// or wss:// instead.",
      "resolved": true,
      "formats": [
        "oas3"
      ]
    },
    "owasp:api8:2023-define-error-validation": {
      "given": [
        "$.paths..responses"
      ],
      "severity": "warn",
      "then": {
        "function": "schema",
        "functionOptions": {
          "schema": {
            "type": "object",
            "anyOf": [
              {
                "required": [
                  "400"
                ]
              },
              {
                "required": [
                  "422"
                ]
              },
              {
                "required": [
                  "4XX"
                ]
              }
            ]
          }
        }
      },
      "description": "Carefully define schemas for all the API responses, including either 400, 422 or 4XX responses which describe errors caused by invalid requests.",
      "message": "Missing error response of either 400, 422 or 4XX.",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api8:2023-define-error-responses-401": {
      "given": [
        "$.paths..responses"
      ],
      "severity": "warn",
      "then": [
        {
          "function": "truthy",
          "field": "401"
        },
        {
          "function": "truthy",
          "field": "401.content"
        }
      ],
      "description": "OWASP API Security recommends defining schemas for all responses, even errors. The 401 describes what happens when a request is unauthorized, so its important to define this not just for documentation, but to empower contract testing to make sure the proper JSON structure is being returned instead of leaking implementation details in backtraces.",
      "message": "Operation is missing {{property}}.",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api8:2023-define-error-responses-500": {
      "given": [
        "$.paths..responses"
      ],
      "severity": "warn",
      "then": [
        {
          "function": "truthy",
          "field": "500"
        },
        {
          "function": "truthy",
          "field": "500.content"
        }
      ],
      "description": "OWASP API Security recommends defining schemas for all responses, even errors. The 500 describes what happens when a request fails with an internal server error, so its important to define this not just for documentation, but to empower contract testing to make sure the proper JSON structure is being returned instead of leaking implementation details in backtraces.",
      "message": "Operation is missing {{property}}.",
      "resolved": true,
      "formats": [
        "oas2",
        "oas3"
      ]
    },
    "owasp:api9:2023-inventory-access": {
      "given": [
        "$.servers.*"
      ],
      "severity": "error",
      "then": {
        "function": "defined",
        "field": "x-internal"
      },
      "description": "Servers are required to use vendor extension x-internal set to true or false to explicitly explain the audience for the API, which will be picked up by most documentation tools.",
      "message": "Declare intended audience of every server by defining servers{{property}} as true/false.",
      "resolved": true,
      "formats": [
        "oas3"
      ]
    },
    "owasp:api9:2023-inventory-environment": {
      "given": [
        "$.servers.*"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "/(local|sandbox|alpha|beta|test|testing|stag|staging|prod|production|next|preprod|preproduction)/i"
        },
        "field": "description"
      },
      "description": "Make it clear which servers are expected to run as which environment to avoid unexpected problems, exposing test data to the public, or letting bad actors bypass security measures to get to production-like environments.",
      "message": "Declare intended environment in server descriptions using terms like local, staging, production.",
      "resolved": true,
      "formats": [
        "oas3"
      ]
    }
  },
  "functions": [
    "checkSecurity",
    "differentSecuritySchemes"
  ],
  "functionsDir": "functions"
}